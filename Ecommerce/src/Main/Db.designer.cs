#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectNS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ecommerce_site")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertEarbud(Earbud instance);
    partial void UpdateEarbud(Earbud instance);
    partial void DeleteEarbud(Earbud instance);
    partial void InsertEarbudsCategory(EarbudsCategory instance);
    partial void UpdateEarbudsCategory(EarbudsCategory instance);
    partial void DeleteEarbudsCategory(EarbudsCategory instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPurchase(Purchase instance);
    partial void UpdatePurchase(Purchase instance);
    partial void DeletePurchase(Purchase instance);
    partial void InsertTea(Tea instance);
    partial void UpdateTea(Tea instance);
    partial void DeleteTea(Tea instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTeaCategory(TeaCategory instance);
    partial void UpdateTeaCategory(TeaCategory instance);
    partial void DeleteTeaCategory(TeaCategory instance);
    #endregion
		
		public DbDataContext() : 
				base(global::ProjectNS.Properties.Settings.Default.ecommerce_siteConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Earbud> Earbuds
		{
			get
			{
				return this.GetTable<Earbud>();
			}
		}
		
		public System.Data.Linq.Table<EarbudsCategory> EarbudsCategories
		{
			get
			{
				return this.GetTable<EarbudsCategory>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Purchase> Purchases
		{
			get
			{
				return this.GetTable<Purchase>();
			}
		}
		
		public System.Data.Linq.Table<Tea> Teas
		{
			get
			{
				return this.GetTable<Tea>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<TeaCategory> TeaCategories
		{
			get
			{
				return this.GetTable<TeaCategory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private string _name;
		
		private EntitySet<EarbudsCategory> _EarbudsCategories;
		
		private EntitySet<TeaCategory> _TeaCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Category()
		{
			this._EarbudsCategories = new EntitySet<EarbudsCategory>(new Action<EarbudsCategory>(this.attach_EarbudsCategories), new Action<EarbudsCategory>(this.detach_EarbudsCategories));
			this._TeaCategories = new EntitySet<TeaCategory>(new Action<TeaCategory>(this.attach_TeaCategories), new Action<TeaCategory>(this.detach_TeaCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_earbuds_category", Storage="_EarbudsCategories", ThisKey="pk", OtherKey="category_pk")]
		public EntitySet<EarbudsCategory> EarbudsCategories
		{
			get
			{
				return this._EarbudsCategories;
			}
			set
			{
				this._EarbudsCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_tea_category", Storage="_TeaCategories", ThisKey="pk", OtherKey="category_pk")]
		public EntitySet<TeaCategory> TeaCategories
		{
			get
			{
				return this._TeaCategories;
			}
			set
			{
				this._TeaCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EarbudsCategories(EarbudsCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_EarbudsCategories(EarbudsCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_TeaCategories(TeaCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_TeaCategories(TeaCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.earbuds")]
	public partial class Earbud : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private string _name;
		
		private decimal _price;
		
		private int _quantity;
		
		private bool _for_sale;
		
		private EntitySet<EarbudsCategory> _EarbudsCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void Onfor_saleChanging(bool value);
    partial void Onfor_saleChanged();
    #endregion
		
		public Earbud()
		{
			this._EarbudsCategories = new EntitySet<EarbudsCategory>(new Action<EarbudsCategory>(this.attach_EarbudsCategories), new Action<EarbudsCategory>(this.detach_EarbudsCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(5,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_for_sale", DbType="Bit NOT NULL")]
		public bool for_sale
		{
			get
			{
				return this._for_sale;
			}
			set
			{
				if ((this._for_sale != value))
				{
					this.Onfor_saleChanging(value);
					this.SendPropertyChanging();
					this._for_sale = value;
					this.SendPropertyChanged("for_sale");
					this.Onfor_saleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="earbud_earbuds_category", Storage="_EarbudsCategories", ThisKey="pk", OtherKey="earbuds_pk")]
		public EntitySet<EarbudsCategory> EarbudsCategories
		{
			get
			{
				return this._EarbudsCategories;
			}
			set
			{
				this._EarbudsCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EarbudsCategories(EarbudsCategory entity)
		{
			this.SendPropertyChanging();
			entity.Earbud = this;
		}
		
		private void detach_EarbudsCategories(EarbudsCategory entity)
		{
			this.SendPropertyChanging();
			entity.Earbud = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.earbuds_categories")]
	public partial class EarbudsCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _earbuds_pk;
		
		private int _category_pk;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Earbud> _Earbud;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onearbuds_pkChanging(int value);
    partial void Onearbuds_pkChanged();
    partial void Oncategory_pkChanging(int value);
    partial void Oncategory_pkChanged();
    #endregion
		
		public EarbudsCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Earbud = default(EntityRef<Earbud>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_earbuds_pk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int earbuds_pk
		{
			get
			{
				return this._earbuds_pk;
			}
			set
			{
				if ((this._earbuds_pk != value))
				{
					if (this._Earbud.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onearbuds_pkChanging(value);
					this.SendPropertyChanging();
					this._earbuds_pk = value;
					this.SendPropertyChanged("earbuds_pk");
					this.Onearbuds_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_pk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int category_pk
		{
			get
			{
				return this._category_pk;
			}
			set
			{
				if ((this._category_pk != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_pkChanging(value);
					this.SendPropertyChanging();
					this._category_pk = value;
					this.SendPropertyChanged("category_pk");
					this.Oncategory_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_earbuds_category", Storage="_Category", ThisKey="category_pk", OtherKey="pk", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.EarbudsCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.EarbudsCategories.Add(this);
						this._category_pk = value.pk;
					}
					else
					{
						this._category_pk = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="earbud_earbuds_category", Storage="_Earbud", ThisKey="earbuds_pk", OtherKey="pk", IsForeignKey=true)]
		public Earbud Earbud
		{
			get
			{
				return this._Earbud.Entity;
			}
			set
			{
				Earbud previousValue = this._Earbud.Entity;
				if (((previousValue != value) 
							|| (this._Earbud.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Earbud.Entity = null;
						previousValue.EarbudsCategories.Remove(this);
					}
					this._Earbud.Entity = value;
					if ((value != null))
					{
						value.EarbudsCategories.Add(this);
						this._earbuds_pk = value.pk;
					}
					else
					{
						this._earbuds_pk = default(int);
					}
					this.SendPropertyChanged("Earbud");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private int _user_id;
		
		private System.DateTime _date;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Order()
		{
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="order_purchase", Storage="_Purchases", ThisKey="pk", OtherKey="order_pk")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_order", Storage="_User", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.purchase")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private int _order_pk;
		
		private int _item_pk;
		
		private string _table_of_item_pk;
		
		private int _quantity;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void Onorder_pkChanging(int value);
    partial void Onorder_pkChanged();
    partial void Onitem_pkChanging(int value);
    partial void Onitem_pkChanged();
    partial void Ontable_of_item_pkChanging(string value);
    partial void Ontable_of_item_pkChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public Purchase()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_pk", DbType="Int NOT NULL")]
		public int order_pk
		{
			get
			{
				return this._order_pk;
			}
			set
			{
				if ((this._order_pk != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onorder_pkChanging(value);
					this.SendPropertyChanging();
					this._order_pk = value;
					this.SendPropertyChanged("order_pk");
					this.Onorder_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_pk", DbType="Int NOT NULL")]
		public int item_pk
		{
			get
			{
				return this._item_pk;
			}
			set
			{
				if ((this._item_pk != value))
				{
					this.Onitem_pkChanging(value);
					this.SendPropertyChanging();
					this._item_pk = value;
					this.SendPropertyChanged("item_pk");
					this.Onitem_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_table_of_item_pk", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string table_of_item_pk
		{
			get
			{
				return this._table_of_item_pk;
			}
			set
			{
				if ((this._table_of_item_pk != value))
				{
					this.Ontable_of_item_pkChanging(value);
					this.SendPropertyChanging();
					this._table_of_item_pk = value;
					this.SendPropertyChanged("table_of_item_pk");
					this.Ontable_of_item_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="order_purchase", Storage="_Order", ThisKey="order_pk", OtherKey="pk", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._order_pk = value.pk;
					}
					else
					{
						this._order_pk = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tea")]
	public partial class Tea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk;
		
		private string _name;
		
		private decimal _price;
		
		private int _quantity;
		
		private bool _for_sale;
		
		private EntitySet<TeaCategory> _TeaCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkChanging(int value);
    partial void OnpkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void Onfor_saleChanging(bool value);
    partial void Onfor_saleChanged();
    #endregion
		
		public Tea()
		{
			this._TeaCategories = new EntitySet<TeaCategory>(new Action<TeaCategory>(this.attach_TeaCategories), new Action<TeaCategory>(this.detach_TeaCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pk
		{
			get
			{
				return this._pk;
			}
			set
			{
				if ((this._pk != value))
				{
					this.OnpkChanging(value);
					this.SendPropertyChanging();
					this._pk = value;
					this.SendPropertyChanged("pk");
					this.OnpkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(5,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_for_sale", DbType="Bit NOT NULL")]
		public bool for_sale
		{
			get
			{
				return this._for_sale;
			}
			set
			{
				if ((this._for_sale != value))
				{
					this.Onfor_saleChanging(value);
					this.SendPropertyChanging();
					this._for_sale = value;
					this.SendPropertyChanged("for_sale");
					this.Onfor_saleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tea_tea_category", Storage="_TeaCategories", ThisKey="pk", OtherKey="tea_pk")]
		public EntitySet<TeaCategory> TeaCategories
		{
			get
			{
				return this._TeaCategories;
			}
			set
			{
				this._TeaCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeaCategories(TeaCategory entity)
		{
			this.SendPropertyChanging();
			entity.Tea = this;
		}
		
		private void detach_TeaCategories(TeaCategory entity)
		{
			this.SendPropertyChanging();
			entity.Tea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _password;
		
		private decimal _balance;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnbalanceChanging(decimal value);
    partial void OnbalanceChanged();
    #endregion
		
		public User()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balance", DbType="Decimal(6,2) NOT NULL")]
		public decimal balance
		{
			get
			{
				return this._balance;
			}
			set
			{
				if ((this._balance != value))
				{
					this.OnbalanceChanging(value);
					this.SendPropertyChanging();
					this._balance = value;
					this.SendPropertyChanged("balance");
					this.OnbalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_order", Storage="_Orders", ThisKey="id", OtherKey="user_id")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tea_categories")]
	public partial class TeaCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tea_pk;
		
		private int _category_pk;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Tea> _Tea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontea_pkChanging(int value);
    partial void Ontea_pkChanged();
    partial void Oncategory_pkChanging(int value);
    partial void Oncategory_pkChanged();
    #endregion
		
		public TeaCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Tea = default(EntityRef<Tea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tea_pk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int tea_pk
		{
			get
			{
				return this._tea_pk;
			}
			set
			{
				if ((this._tea_pk != value))
				{
					if (this._Tea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontea_pkChanging(value);
					this.SendPropertyChanging();
					this._tea_pk = value;
					this.SendPropertyChanged("tea_pk");
					this.Ontea_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_pk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int category_pk
		{
			get
			{
				return this._category_pk;
			}
			set
			{
				if ((this._category_pk != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_pkChanging(value);
					this.SendPropertyChanging();
					this._category_pk = value;
					this.SendPropertyChanged("category_pk");
					this.Oncategory_pkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_tea_category", Storage="_Category", ThisKey="category_pk", OtherKey="pk", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.TeaCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.TeaCategories.Add(this);
						this._category_pk = value.pk;
					}
					else
					{
						this._category_pk = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tea_tea_category", Storage="_Tea", ThisKey="tea_pk", OtherKey="pk", IsForeignKey=true)]
		public Tea Tea
		{
			get
			{
				return this._Tea.Entity;
			}
			set
			{
				Tea previousValue = this._Tea.Entity;
				if (((previousValue != value) 
							|| (this._Tea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tea.Entity = null;
						previousValue.TeaCategories.Remove(this);
					}
					this._Tea.Entity = value;
					if ((value != null))
					{
						value.TeaCategories.Add(this);
						this._tea_pk = value.pk;
					}
					else
					{
						this._tea_pk = default(int);
					}
					this.SendPropertyChanged("Tea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
